{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "# Import the fucking useful libraries =)\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.sparse as sp\n",
    "import itertools\n",
    "import math\n",
    "from MF_SGD import *\n",
    "\n",
    "\n",
    "\n",
    "# There's a lot of columns in the DF. \n",
    "# Therefore, we add this option so that we can see more columns\n",
    "pd.options.display.max_columns = 100\n",
    "\n",
    "%matplotlib inline\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of items: 10000, number of users: 1000\n",
      "percent of defined matrix 8.496523222697272\n",
      "# non-zeros 1176952\n",
      "it's probably the opposite, 10'000 users for 1'000 movies. Let's verify that.\n"
     ]
    }
   ],
   "source": [
    "data = load_data('../data/data_train.csv')\n",
    "print(\"percent of defined matrix\", percent_sparse(data))\n",
    "print(\"# non-zeros\", data.nnz)\n",
    "print(\"it's probably the opposite, 10'000 users for 1'000 movies. Let's verify that.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of nonzero elements in origial data:1176951\n",
      "Total number of nonzero elements in train data:1059256\n",
      "Total number of nonzero elements in test data:117695\n",
      "Percentage of cut:10.00\n"
     ]
    }
   ],
   "source": [
    "train, test = split_data(data, p_test=0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Baseline prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline RMSE prediction\n",
      "------------------------\n",
      "global mean:  1.12111609422\n",
      "user mean:  1.09940007244\n",
      "item mean:  1.03224182856\n",
      "------------------------\n",
      "in HW:  1.12653505598 1.02056979087 1.0486389103\n"
     ]
    }
   ],
   "source": [
    "print(\"Baseline RMSE prediction\")\n",
    "print(\"------------------------\")\n",
    "print(\"global mean: \", baseline_global_mean(train, test))\n",
    "print(\"user mean: \", baseline_user_mean(train, test))\n",
    "print(\"item mean: \", baseline_item_mean(train, test))\n",
    "print(\"------------------------\")\n",
    "print(\"in HW: \", 1.12653505598, 1.02056979087, 1.0486389103)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matrix Factorization using SGD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of nonzero elements in origial data:1176951\n",
      "Total number of nonzero elements in train data:1059256\n",
      "Total number of nonzero elements in test data:117695\n",
      "Percentage of cut:10.00\n",
      "Total number of nonzero elements in origial data:117695\n",
      "Total number of nonzero elements in train data:105926\n",
      "Total number of nonzero elements in test data:11769\n",
      "Percentage of cut:10.00\n"
     ]
    }
   ],
   "source": [
    "sub_data = select_subset(data, 0.1)\n",
    "sub_train, sub_test = split_data(sub_data, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "learn the matrix factorization using SGD...\n",
      "iter: 0, RMSE on training set: 1.0411454661379116.\n",
      "iter: 1, RMSE on training set: 1.0219206744618283.\n",
      "iter: 2, RMSE on training set: 1.0118646298481118.\n",
      "iter: 3, RMSE on training set: 1.0054235790691541.\n",
      "iter: 4, RMSE on training set: 1.0009418788250917.\n",
      "iter: 5, RMSE on training set: 0.9976630960808822.\n",
      "iter: 6, RMSE on training set: 0.9951985067800365.\n",
      "iter: 7, RMSE on training set: 0.9932965105791426.\n",
      "iter: 8, RMSE on training set: 0.9918072205553905.\n",
      "iter: 9, RMSE on training set: 0.9906267519596169.\n",
      "RMSE on test data: 1.015194853126176.\n",
      "learn the matrix factorization using SGD...\n",
      "iter: 0, RMSE on training set: 1.0411454661379116.\n",
      "iter: 1, RMSE on training set: 1.0219206744618283.\n",
      "iter: 2, RMSE on training set: 1.0118646298481118.\n",
      "iter: 3, RMSE on training set: 1.0054235790691541.\n",
      "iter: 4, RMSE on training set: 1.0009418788250917.\n",
      "iter: 5, RMSE on training set: 0.9976630960808822.\n",
      "iter: 6, RMSE on training set: 0.9951985067800365.\n",
      "iter: 7, RMSE on training set: 0.9932965105791424.\n",
      "iter: 8, RMSE on training set: 0.9918072205553905.\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0mTraceback (most recent call last)",
      "\u001b[0;32m<ipython-input-96-b25f01a08de9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfeature\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_es\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_e\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmatrix_factorization_SGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msub_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msub_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgamma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0mtrain_errors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_es\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mtest_errors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_e\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/joachimmuth/Documents/EPFL/PCML/PCML_Netflix_and_Chill/joachim_bullshit/Mat_Fac_SGD.py\u001b[0m in \u001b[0;36mmatrix_factorization_SGD\u001b[0;34m(train, test, gamma, n_features, n_iter)\u001b[0m\n\u001b[1;32m    324\u001b[0m             \u001b[0muser_features\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mgamma\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mgrad_user\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m         \u001b[0mrmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muser_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mitem_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnz_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    327\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"iter: {}, RMSE on training set: {}.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrmse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/joachimmuth/Documents/EPFL/PCML/PCML_Netflix_and_Chill/joachim_bullshit/Mat_Fac_SGD.py\u001b[0m in \u001b[0;36mcompute_error\u001b[0;34m(data, user_features, item_features, nz)\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0msquare_errors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnz\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m         \u001b[0msquare_errors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msquare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem_features\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muser_features\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m     \u001b[0mmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msquare_errors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# gammas = np.linspace(0.0001, 0.01, 10)\n",
    "gamma = 0.002\n",
    "features = np.arange(1, 20, 5)\n",
    "# feature = 10\n",
    "iter = 10\n",
    "\n",
    "train_errors = []\n",
    "test_errors = []\n",
    "\n",
    "for feature in features:\n",
    "    _, _, train_es, test_e = matrix_factorization_SGD(sub_train, sub_test, gamma, n_features=feature, n_iter=iter)\n",
    "    train_errors.append(train_es[-1])\n",
    "    test_errors.append(test_e)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nTaSy6rwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x125c347b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(10, 5))\n",
    "plt.plot(gammas, train_errors)\n",
    "plt.plot(gammas, test_errors)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## test the model on full data\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "learn the matrix factorization using SGD...\n",
      "iter: 0, RMSE on training set: 1.0011948513142552.\n",
      "iter: 1, RMSE on training set: 0.9951777866878817.\n",
      "iter: 2, RMSE on training set: 0.9931153335966351.\n",
      "iter: 3, RMSE on training set: 0.9921051046575828.\n",
      "iter: 4, RMSE on training set: 0.9916609803765487.\n",
      "iter: 5, RMSE on training set: 0.991291524206102.\n",
      "iter: 6, RMSE on training set: 0.9910922419813835.\n",
      "iter: 7, RMSE on training set: 0.9909110686789022.\n",
      "iter: 8, RMSE on training set: 0.9908028183995317.\n",
      "iter: 9, RMSE on training set: 0.9907224330174351.\n",
      "iter: 10, RMSE on training set: 0.9906654287929573.\n",
      "iter: 11, RMSE on training set: 0.9906232050517021.\n",
      "iter: 12, RMSE on training set: 0.9905845177410416.\n",
      "iter: 13, RMSE on training set: 0.9905591557550518.\n",
      "iter: 14, RMSE on training set: 0.9905409611885503.\n",
      "iter: 15, RMSE on training set: 0.9905285697325554.\n",
      "iter: 16, RMSE on training set: 0.990518822617852.\n",
      "iter: 17, RMSE on training set: 0.9905110995795985.\n",
      "iter: 18, RMSE on training set: 0.9905048199206453.\n",
      "iter: 19, RMSE on training set: 0.9904998874248897.\n",
      "RMSE on test data: 1.0016574693967433.\n"
     ]
    }
   ],
   "source": [
    "item_features, user_features, train_es, test_e = \\\n",
    "    matrix_factorization_SGD_full_training(data, 0.002, n_features=20, n_iter=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of items: 10000, number of users: 1000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<10000x1000 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 1176952 stored elements in LInked List format>"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(item_features, user_features, \"../data/sampleSubmission.csv\")"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
